git clone git://github.com/opengeo/gsconfig.git && cd gsconfig && python setup.py develop

# ##############################################################
# - Import the necessary stuff
# ##############################################################
from geoserver.catalog import Catalog

from geoserver.layer import Layer
from geoserver.style import Style

# ##############################################################
# - How to get the properties of a Class
# ##############################################################
Catalog.__dict__
Catalog.__dict__.keys()

# ##############################################################
# - Alternatively for Class methods
# ##############################################################
import inspect
inspect.getmembers(Catalog, predicate=inspect.ismethod)

# ##############################################################
# - Load the catalog
# ##############################################################
cat = Catalog("http://localhost:8080/geoserver/rest/")
cat.username = "admin"
cat.password = "****"

# ##############################################################
# - Create a FeatureType from a Shapefile
# ##############################################################
geosolutions = cat.get_workspace("geosolutions")
import geoserver.util
shapefile_plus_sidecars = geoserver.util.shapefile_and_friends("C:/work/gsconfig/test/data/states")
# shapefile_and_friends should look on the filesystem to find a shapefile
# and related files based on the base path passed in
#
# shapefile_plus_sidecars == {
#    'shp': 'states.shp',
#    'shx': 'states.shx',
#    'prj': 'states.prj',
#    'dbf': 'states.dbf'
# }

# 'data' is required (there may be a 'schema' alternative later, for creating empty featuretypes)
# 'workspace' is optional (GeoServer's default workspace is used by... default)
# 'name' is required
ft = cat.create_featurestore("test", shapefile_plus_sidecars, geosolutions)

# ##############################################################
# - Update the catalog
# ##############################################################
ne_shaded = cat.get_layer("ne_shaded")
ne_shaded.enabled=True
cat.save(ne_shaded)
cat.reload()

# ##############################################################
# - Delete a Store
# ##############################################################
st = cat.get_store("ne_shaded")
cat.delete(ne_shaded)
cat.reload()
cat.delete(st)
cat.reload()

# ##############################################################
# - Image Mosaic
# 
# http://localhost:8180/geoserver/rest/workspaces/natocmre/coveragestores/NOAAWW3_NCOMultiGrid_WIND_test/coverages.xml
# 
# http://localhost:8180/geoserver/rest/workspaces/natocmre/coveragestores/NOAAWW3_NCOMultiGrid_WIND_test/coverages/NOAAWW3_NCOMultiGrid_WIND_test.xml
# 
# http://localhost:8180/geoserver/rest/workspaces/natocmre/coveragestores/NOAAWW3_NCOMultiGrid_WIND_test/coverages/NOAAWW3_NCOMultiGrid_WIND_test/index.xml
# 
# http://localhost:8180/geoserver/rest/workspaces/natocmre/coveragestores/NOAAWW3_NCOMultiGrid_WIND_test/coverages/NOAAWW3_NCOMultiGrid_WIND_test/index/granules.xml
# 
# ##############################################################
## ####
## Create
## ####
from geoserver.catalog import Catalog
cat = Catalog("http://localhost:8180/geoserver/rest")
cat.create_imagemosaic("NOAAWW3_NCOMultiGrid_WIND_test", "NOAAWW3_NCOMultiGrid_WIND_test.zip")

## ####
## Get the Store
## ####
store = cat.get_store("NOAAWW3_NCOMultiGrid_WIND_test")

## ####
## Harvest a local file
## ####
cat.harvest_externalgranule("file://D:/Work/apache-tomcat-6.0.16/instances/data/data/MetOc/NOAAWW3/20131001/WIND/NOAAWW3_NCOMultiGrid__WIND_000_20131001T000000.tif", store)

## ####
## Harvest a remote file
## ####
cat.harvest_uploadgranule("NOAAWW3_NCOMultiGrid__WIND_000_20131002T000000.zip", store)

## ####
## Delete
## ####
layer = cat.get_layer("NOAAWW3_NCOMultiGrid_WIND_test")
cat.delete(layer)
cat.reload()
cat.delete(store)
cat.reload()

## ####
## Get Coverage Metadata
## ####
coverage = cat.get_resource_by_url("http://localhost:8180/geoserver/rest/workspaces/natocmre/coveragestores/NOAAWW3_NCOMultiGrid_WIND_test/coverages/NOAAWW3_NCOMultiGrid_WIND_test.xml")
coverage.supported_formats = ['GEOTIFF']
cat.save(coverage)

## ####
## Update Coverage Metadata
# DimensionInfo(name, enabled, presentation, resolution, units, unitSymbol)
#  presentation -> 'LIST', 'DISCRETE_INTERVAL', 'CONTINUOUS_INTERVAL'
## ####
from geoserver.support import DimensionInfo
timeInfo = DimensionInfo("time", "true", "LIST", None, "ISO8601", None)
coverage.metadata = ({'dirName':'NOAAWW3_NCOMultiGrid_WIND_test_NOAAWW3_NCOMultiGrid_WIND_test', 'time': timeInfo})
cat.save(coverage)

## ####
## Read Granules
# cat.mosaic_coverages(store)
# cat.mosaic_coverage_schema(coverage, store)
# cat.mosaic_granules(coverage, store)
## ####
from geoserver.catalog import Catalog
cat = Catalog("http://localhost:8180/geoserver/rest")
store = cat.get_store("NOAAWW3_NCOMultiGrid_WIND_test")
coverages = cat.mosaic_coverages(store)
schema = cat.mosaic_coverage_schema(coverages['coverages']['coverage'][0]['name'], store)
granules = cat.mosaic_granules(coverages['coverages']['coverage'][0]['name'], store)

# Get info
granules['crs']['properties']['name']
granules['features']

granules['features'][0]['properties']['time']
granules['features'][0]['properties']['location']
granules['features'][0]['properties']['run']

# Filtering on Schema attributes
granules = cat.mosaic_granules(coverages['coverages']['coverage'][0]['name'], store, "time >= '2013-10-01T03:00:00.000Z'")
granules = cat.mosaic_granules(coverages['coverages']['coverage'][0]['name'], store, "time >= '2013-10-01T03:00:00.000Z' AND run = 0")
granules = cat.mosaic_granules(coverages['coverages']['coverage'][0]['name'], store, "location LIKE '%20131002T000000.tif'")

